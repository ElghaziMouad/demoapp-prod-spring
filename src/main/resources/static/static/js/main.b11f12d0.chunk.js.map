{"version":3,"sources":["components/Project/CreateProjectButton.js","actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/securityActions.js","components/Layout/Header.js","components/Project/AddProject.js","reducers/backlogReducer.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","components/Project/UpdateProject.js","components/ProjectBoard/ProjectTasks/ProjectTask.js","actions/backlogAction.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTasks/AddProjectTask.js","components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","components/Layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecureRoute.js","App.js","serviceWorker.js","index.js"],"names":["CreateProjectButton","Fragment","to","className","createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","ProjectItem","onDeleteClick","id","props","deleteProject","this","projectIdentifier","projectName","description","onClick","bind","Component","connect","window","confirm","delete","Dashboard","getProjects","projects","map","key","state","get","res","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsNotAuthenticated","userIsAuthenticated","fullName","data-toggle","data-target","AddProject","start_date","end_date","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProject","classnames","placeholder","initialState","project_tasks","project_task","booleanActionPayload","combineReducers","action","filter","backlog","projectSequence","middleware","thunk","ReactReduxDexTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","match","params","getProject","updateProject","disabled","ProjectTask","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","status","ProjectBoard","getBacklog","BoardContent","projectTasks","projectNotFound","role","boardAlgorithm","AddProjectTask","dueDate","newTask","addProjectTask","UpdateProjectTask","create_At","getProjectTask","newProps","upadateProjectTask","patch","Landing","Register","username","password","confirmPassword","newUser","createNewUser","Login","LoginRequest","login","loginRequest","setItem","decoded","jwt_decode","console","log","component","otherProps","render","jwtToken","decode_jwtToekn","currentTime","Date","now","exp","App","exact","path","SecureRoute","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b11f12d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst CreateProjectButton = () => {\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\r\n                Create a Project\r\n            </Link>\r\n        </React.Fragment>\r\n    )\r\n    \r\n}\r\n\r\nexport default CreateProjectButton;","import axios from 'axios';\r\nimport {GET_ERRORS, GET_PROJECT, GET_PROJECTS, DELETE_PROJECT} from './types';\r\n\r\nexport const createProject = (project, history) => async dispatch => {\r\n    try {\r\n        await axios.post('/api/project', project);\r\n        history.push(\"/dashboard\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        })\r\n    } catch(err) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nexport const getProjects = () => async dispatch => {\r\n    const res = await axios.get('/api/project/all');\r\n    dispatch({\r\n        type: GET_PROJECTS,\r\n        payload: res.data\r\n    })\r\n};\r\n\r\nexport const getProject = (id,history) => async dispatch => {\r\n    try{\r\n        const res = await axios.get(`/api/project/${id}`);\r\n        dispatch({\r\n            type:GET_PROJECT,\r\n            payload: res.data\r\n        })\r\n    }catch(error){\r\n        history.push(\"/dashboard\");\r\n    }\r\n}\r\n\r\nexport const deleteProject = id => async dispatch => {\r\n    if(window.confirm('Are you sure? this will delete th eproject and all the data related to it')){\r\n        await axios.delete(`/api/project/${id}`);\r\n        dispatch({\r\n            type: DELETE_PROJECT,\r\n            payload: id\r\n        })\r\n    } \r\n}\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const GET_PROJECTS = \"GET_PROJECTS\";\r\nexport const GET_PROJECT = \"GET_PROJECT\";\r\nexport const DELETE_PROJECT = \"DELETE_PROJECT\";\r\n\r\n// Type for backlog actions\r\n\r\nexport const GET_BACKLOG = \"GET_BACKLOG\";\r\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\r\nexport const DELETE_PROJECT_TASK = \"DELETE_PROJECT_TASK\";\r\n\r\nexport const SET_CURRENT_USER = \"DELETE_PROJECT_TASK\";\r\n\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport {deleteProject} from '../../actions/projectActions';\r\n\r\nclass ProjectItem extends Component {\r\n\r\n    onDeleteClick = id => {\r\n        this.props.deleteProject(id);\r\n    }\r\n\r\n    render() {\r\n        const {project} = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"card card-body bg-light mb-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-2\">\r\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-4 col-8\">\r\n                            <h3>{project.projectName}</h3>\r\n                            <p>Pr{project.description}</p>\r\n                        </div>\r\n                        <div className=\"col-md-4 d-none d-lg-block\">\r\n                            <ul className=\"list-group\">\r\n                                <Link to={`/projectBoard/${project.projectIdentifier}`}>\r\n                                    <li className=\"list-group-item board\">\r\n                                        <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\r\n                                    </li>\r\n                                </Link>\r\n                                <Link to={`updateProject/${project.projectIdentifier}`}>\r\n                                    <li className=\"list-group-item update\">\r\n                                        <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\r\n                                    </li>\r\n                                </Link>\r\n                                \r\n                                <li onClick={this.onDeleteClick.bind(this, project.projectIdentifier)} className=\"list-group-item delete\">\r\n                                    <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nProjectItem.propTypes = {\r\n    deleteProject: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {deleteProject}) (ProjectItem);","import React, { Component } from 'react'\r\nimport CreateProjectButton from './Project/CreateProjectButton';\r\nimport ProjectItem from './Project/ProjectItem';\r\nimport {connect} from 'react-redux';\r\nimport {getProjects} from '../actions/projectActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Dashboard extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.getProjects();\r\n    }\r\n\r\n    render() {\r\n        const {projects} = this.props.project;\r\n        return (\r\n            <div className=\"projects\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <h1 className=\"display-4 text-center\">Projects</h1>\r\n                            <br />\r\n                            <CreateProjectButton />\r\n                            <br />\r\n                            <hr />\r\n                            {projects.map(project=> (\r\n                                <ProjectItem key={project.id} project={project} />\r\n                            ))\r\n                            }\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboard.propTypes = {\r\n    project: PropTypes.object.isRequired,\r\n    getProjects: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    project: state.project\r\n})\r\n\r\nexport default connect(mapStateToProps, {getProjects}) (Dashboard);\r\n","import axios from 'axios';\r\n\r\nconst setJWTToken = token => {\r\n    if(token){\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }else{\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setJWTToken;","import axios from \"axios\";\r\nimport setJWTToken from \"../securityUtils/setJWTToken\";\r\nimport { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nexport const createNewUser = (newUser, history) => async dispatch => {\r\n    try {\r\n        await axios.post(\"/api/users/register\", newUser);\r\n        history.push(\"/login\");\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const login = loginRequest => async dispatch => {\r\n    try{\r\n        const res = await axios.post(\"/api/users/login\", loginRequest);\r\n        const {token} = res.data;\r\n        localStorage.setItem(\"jwtToken\", token);\r\n        setJWTToken(token);\r\n        const decoded = jwt_decode(token);\r\n        console.log({decoded});\r\n        dispatch({\r\n            type: SET_CURRENT_USER,\r\n            payload: decoded\r\n        })\r\n    }catch(err){\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const logout = () => dispatch => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setJWTToken(false);\r\n    dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: {}\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {logout} from '../../actions/securityActions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Header extends Component {\r\n\r\n    logout(){\r\n        this.props.logout();\r\n        window.location.href = \"/\"; \r\n    }\r\n    render() {\r\n        const {validToken, user} = this.props.security;\r\n\r\n        const userIsNotAuthenticated = (\r\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/register\" className=\"nav-link \" >\r\n                            Sign up\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/login\">\r\n                            Login\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n\r\n        const userIsAuthenticated = (\r\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/dashboard\">\r\n                            Dashboard\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/dashboard\" className=\"nav-link \" >\r\n                            <i className=\"fas fa-user-circle mr-1\"/> {user.fullName}\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/logout\" onClick={this.logout.bind(this)}>\r\n                            logout\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n\r\n        let headerLinks;\r\n\r\n        if(validToken && user) {\r\n            headerLinks = userIsAuthenticated;\r\n        }else {\r\n            headerLinks = userIsNotAuthenticated;\r\n        }\r\n\r\n        return (\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\r\n                <div className=\"container\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">\r\n                        Personal Project Management Tool\r\n                    </Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                        <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n                    {headerLinks}\r\n                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    logout: PropTypes.func.isRequired,\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout}) (Header);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport {createProject} from '../../actions/projectActions';\r\nimport classnames from 'classnames';\r\n\r\nclass AddProject extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            projectName: \"\",\r\n            projectIdentifier: \"\",\r\n            description: \"\",\r\n            start_date: \"\",\r\n            end_date: \"\",\r\n            errors: {}\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSubmit= this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.errors){\r\n            this.setState({errors: nextProps.errors});\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const newProject = {\r\n            projectName: this.state.projectName,\r\n            projectIdentifier: this.state.projectIdentifier,\r\n            description: this.state.description,\r\n            start_date: this.state.start_date,\r\n            end_date: this.state.end_date\r\n        }\r\n        this.props.createProject(newProject, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"register\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <h5 className=\"display-4 text-center\">Create / Edit Project form</h5>\r\n                                <hr />\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            name=\"projectName\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.projectName\r\n                                            })} \r\n                                            placeholder=\"Project Name\" \r\n                                            value={this.state.projectName}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        {errors.projectName && (\r\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            name=\"projectIdentifier\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.projectIdentifier\r\n                                            })} \r\n                                            placeholder=\"Unique Project ID\" \r\n                                            value= {this.state.projectIdentifier}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        {errors.projectIdentifier && (\r\n                                            <div className=\"invalid-feedback\">{errors.projectIdentifier}</div>\r\n                                        )}                                    \r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <textarea \r\n                                            name=\"description\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.description\r\n                                            })} \r\n                                            placeholder=\"Project Description\"\r\n                                            value={this.state.description}\r\n                                            onChange={this.onChange}\r\n                                        ></textarea>\r\n                                        {errors.description && (\r\n                                            <div className=\"invalid-feedback\">{errors.description}</div>\r\n                                        )}                                     \r\n                                    </div>\r\n                                    <h6>Start Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"date\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.start_date\r\n                                            })} \r\n                                            name=\"start_date\" \r\n                                            value={this.state.start_date}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        {errors.start_date && (\r\n                                            <div className=\"invalid-feedback\">{errors.start_date}</div>\r\n                                        )}\r\n                                    </div>\r\n                                    <h6>Estimated End Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"date\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.end_date\r\n                                            })} \r\n                                            name=\"end_date\" \r\n                                            value={this.state.end_date}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        {errors.end_date && (\r\n                                            <div className=\"invalid-feedback\">{errors.end_date}</div>\r\n                                        )} \r\n                                    </div>\r\n            \r\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                                    <br/>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    errors: state.errors\r\n});\r\n\r\nAddProject.propTypes = {\r\n    createProject: PropTypes.func.isRequired,\r\n    errors : PropTypes.object.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, {createProject}) (AddProject);","import {GET_BACKLOG, \r\n    GET_PROJECT_TASK,\r\n    DELETE_PROJECT_TASK\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    project_tasks: [],\r\n    project_task:{}\r\n}\r\n\r\nexport default function(state=initialState, action){\r\n    switch(action.type){\r\n        case GET_BACKLOG:\r\n            return {\r\n                ...state,\r\n                project_tasks:action.payload\r\n            }\r\n\r\n        case GET_PROJECT_TASK:\r\n            return {\r\n                ...state,\r\n                project_task: action.payload\r\n            }\r\n\r\n        case DELETE_PROJECT_TASK:\r\n            return {\r\n                ...state,\r\n                project_tasks: state.project_tasks.filter(project_task => project_task.projectSequence !== action.payload)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_ERRORS} from '../actions/types';\r\n\r\nconst initialState = {};\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case GET_ERRORS:\r\n            return action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_PROJECTS, GET_PROJECT, DELETE_PROJECT} from '../actions/types';\r\n\r\nconst initialState = {\r\n    projects: [],\r\n    project: {}\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type){\r\n        case GET_PROJECTS:\r\n            return {\r\n                ...state,\r\n                projects: action.payload\r\n            };\r\n        case GET_PROJECT:\r\n            return {\r\n                ...state,\r\n                project:action.payload\r\n            }\r\n        case DELETE_PROJECT:\r\n            return {\r\n                ...state,\r\n                projects: state.projects.filter(project => project.projectIdentifier !== action.payload)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {SET_CURRENT_USER} from '../actions/types';\r\n\r\nconst initialState = {\r\n    user: {},\r\n    validToken: false\r\n}\r\n\r\nconst booleanActionPayload= (payload) => {\r\n    if(payload){\r\n        return true;\r\n    }else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default function(state= initialState, action){\r\n    switch(action.type){\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                validToken: booleanActionPayload(action.payload),\r\n                user: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport backlogReducer from './backlogReducer';\r\nimport errorReducer from './errorReducer';\r\nimport projectReducer from './projectReducer';\r\nimport securityReducer from './securityReducer';\r\n\r\nexport default combineReducers({\r\n    errors: errorReducer,\r\n    project: projectReducer,\r\n    backlog: backlogReducer,\r\n    security: securityReducer\r\n});\r\n","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nlet store;\r\n\r\nconst ReactReduxDexTools = window.__REDUX_DEVTOOLS_EXTENSION__ && \r\nwindow.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\nif(window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDexTools) {\r\n    store = createStore(\r\n        rootReducer, \r\n        initialState, \r\n        compose(\r\n            applyMiddleware(...middleware),\r\n            ReactReduxDexTools\r\n        )\r\n    )\r\n}else {\r\n    store = createStore(\r\n        rootReducer, \r\n        initialState, \r\n        compose(\r\n            applyMiddleware(...middleware)\r\n        )\r\n    )\r\n}\r\n\r\nexport default store;","import React, { Component } from 'react'\r\nimport classnames from 'classnames';\r\nimport {getProject, createProject} from '../../actions/projectActions';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\nclass UpdateProject extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            id:\"\",\r\n            projectName: \"\",\r\n            projectIdentifier: \"\",\r\n            description: \"\",\r\n            start_date: \"\",\r\n            end_date: \"\",\r\n            errors: {}\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSubmit= this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n\r\n        if(nextProps.errors) {\r\n            this.setState({errors: nextProps.errors});\r\n        }\r\n        const {id,\r\n        projectName,\r\n        projectIdentifier,\r\n        description,\r\n        start_date,\r\n        end_date} = nextProps.project;\r\n        this.setState({\r\n            id,\r\n            projectName,\r\n            projectIdentifier,\r\n            description,\r\n            start_date,\r\n            end_date\r\n        });\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        const { id } = this.props.match.params;\r\n        this.props.getProject(id,this.props.history);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const updateProject = {\r\n            id: this.state.id,\r\n            projectName: this.state.projectName,\r\n            projectIdentifier: this.state.projectIdentifier,\r\n            description: this.state.description,\r\n            start_date: this.state.start_date,\r\n            end_date: this.state.end_date\r\n        };\r\n        this.props.createProject(updateProject, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"register\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <h5 className=\"display-4 text-center\">Update Project form</h5>\r\n                                <hr />\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            name=\"projectName\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                               \"is-invalid\": errors.projectName\r\n                                            })} \r\n                                            placeholder=\"Project Name\" \r\n                                            value={this.state.projectName}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        {errors.projectName && (\r\n                                            <div className=\"invalid-feedback\">{errors.projectName}</div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"text\" \r\n                                            name=\"projectIdentifier\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.projectIdentifier\r\n                                            })} \r\n                                            placeholder=\"Unique Project ID\" \r\n                                            value= {this.state.projectIdentifier}\r\n                                            onChange={this.onChange}\r\n                                            disabled\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <textarea \r\n                                            name=\"description\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.description\r\n                                            })} \r\n                                            placeholder=\"Project Description\"\r\n                                            value={this.state.description}\r\n                                            onChange={this.onChange}\r\n                                        ></textarea>\r\n                                        {errors.description && (\r\n                                            <div className=\"invalid-feedback\">{errors.description}</div>\r\n                                        )}                                     \r\n                                    </div>\r\n                                    <h6>Start Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"date\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.start_date\r\n                                            })} \r\n                                            name=\"start_date\" \r\n                                            value={this.state.start_date}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        {errors.start_date && (\r\n                                            <div className=\"invalid-feedback\">{errors.start_date}</div>\r\n                                        )}\r\n                                    </div>\r\n                                    <h6>Estimated End Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input \r\n                                            type=\"date\" \r\n                                            className={classnames(\"form-control form-control-lg \",{\r\n                                                \"is-invalid\": errors.end_date\r\n                                            })} \r\n                                            name=\"end_date\" \r\n                                            value={this.state.end_date}\r\n                                            onChange={this.onChange}\r\n                                        />\r\n                                        {errors.end_date && (\r\n                                            <div className=\"invalid-feedback\">{errors.end_date}</div>\r\n                                        )} \r\n                                    </div>\r\n            \r\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                                    <br/>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    project: state.project.project,\r\n    errors: state.errors\r\n});\r\n\r\nUpdateProject.propTypes = {\r\n    getProject: PropTypes.func.isRequired,\r\n    createProject: PropTypes.func.isRequired,\r\n    project : PropTypes.object.isRequired,\r\n    errors : PropTypes.object.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, {getProject, createProject}) (UpdateProject);\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {deleteProjectTask} from '../../../actions/backlogAction';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\nclass ProjectTask extends Component {\r\n\r\n    onDeleteClick(backlog_id, pt_id){\r\n        this.props.deleteProjectTask(backlog_id, pt_id);\r\n    }\r\n\r\n    render() {\r\n        const {project_task} = this.props;\r\n        let priorityString;\r\n        let priorityClass;\r\n\r\n        if(project_task.priority === 1){\r\n            priorityClass = \"bg-danger text-light\";\r\n            priorityString = \"HIGH\"\r\n        }\r\n        if(project_task.priority === 2){\r\n            priorityClass = \"bg-warning text-light\";\r\n            priorityString = \"MEDUIM\"\r\n        }\r\n        if(project_task.priority === 3){\r\n            priorityClass = \"bg-info text-light\";\r\n            priorityString = \"LOW\"\r\n        }\r\n\r\n        return (\r\n            <div className=\"card mb-1 bg-light\">\r\n\r\n                <div className={`card-header text-primary ${priorityClass}`}>\r\n                    ID: {project_task.projectSequence} -- Priority:{priorityString}\r\n                    {project_task.priority}\r\n                </div>\r\n                <div className=\"card-body bg-light\">\r\n                    <h5 className=\"card-title\">{project_task.summary}</h5>\r\n                    <p className=\"card-text text-truncate \">\r\n                        {project_task.acceptanceCriteria}\r\n                    </p>\r\n                    <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`} className=\"btn btn-primary\">\r\n                        View / Update\r\n                    </Link>\r\n\r\n                    <button onClick={this.onDeleteClick.bind(this, project_task.projectIdentifier, project_task.projectSequence)} className=\"btn btn-danger ml-4\">\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nProjectTask.propTypes = {\r\n    deleteProjectTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, {deleteProjectTask}) (ProjectTask);\r\n","import axios from 'axios';\r\nimport {GET_PROJECT_TASK, GET_BACKLOG, GET_ERRORS, DELETE_PROJECT_TASK} from './types';\r\n\r\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\r\n\r\n    try{\r\n        await axios.post(`/api/backlog/${backlog_id}`, project_task);\r\n        history.push(`/projectBoard/${backlog_id}`);\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload: {}\r\n        })\r\n    } catch(err){\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }   \r\n    \r\n};\r\n\r\nexport const getBacklog = backlog_id => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\r\n        dispatch({\r\n            type: GET_BACKLOG,\r\n            payload: res.data\r\n        })\r\n    }catch(err){\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\r\n    try{\r\n        const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\r\n        dispatch({\r\n            type: GET_PROJECT_TASK,\r\n            payload: res.data\r\n        })\r\n    }catch(err){\r\n        history.push(\"/dashboard\");\r\n    }\r\n}\r\n\r\nexport const upadateProjectTask = (backlog_id, pt_id, project_task, history) => async dispatch => {\r\n    try{\r\n        await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\r\n        history.push(`/projectBoard/${backlog_id}`);\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: {}\r\n        })\r\n    }catch(err){\r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\r\n    if(window.confirm(`You are deleting project task ${pt_id}, this.action cannot be undone`)){\r\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\r\n        dispatch({\r\n            type: DELETE_PROJECT_TASK,\r\n            payload: pt_id\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport ProjectTask from './ProjectTasks/ProjectTask'\r\n// import {Link} from 'react-router-dom';\r\n\r\nclass Backlog extends Component {\r\n    render() {\r\n        const {project_tasks_prop} = this.props;\r\n        const tasks = project_tasks_prop.map(project_task => {\r\n            return <ProjectTask key={project_task.id} project_task={project_task}/>\r\n        });\r\n        let todoItems = [];\r\n        let inProgressItems = [];\r\n        let doneItems = [];\r\n\r\n        for(let i=0; i<tasks.length; i++){\r\n            if(tasks[i].props.project_task.status === \"TO_DO\"){\r\n                todoItems.push(tasks[i]);\r\n            }\r\n            if(tasks[i].props.project_task.status === \"IN_PROGRESS\"){\r\n                inProgressItems.push(tasks[i]);\r\n            }\r\n            if(tasks[i].props.project_task.status === \"DONE\"){\r\n                doneItems.push(tasks[i]);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"card text-center mb-2\">\r\n                            <div className=\"card-header bg-secondary text-white\">\r\n                                <h3>TO DO</h3>\r\n                            </div>\r\n                        </div>\r\n                        {todoItems}\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"card text-center mb-2\">\r\n                            <div className=\"card-header bg-primary text-white\">\r\n                                <h3>In Progress</h3>\r\n                            </div>\r\n                        </div>\r\n                        {inProgressItems}\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"card text-center mb-2\">\r\n                            <div className=\"card-header bg-success text-white\">\r\n                                <h3>Done</h3>\r\n                            </div>\r\n                        </div>\r\n                        {doneItems}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Backlog;\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Backlog from './Backlog';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {getBacklog} from '../../actions/backlogAction'\r\n\r\nclass ProjectBoard extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            errors: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {id} = this.props.match.params;\r\n        this.props.getBacklog(id);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.errors){\r\n            this.setState({errors:nextProps.errors})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {id} = this.props.match.params;\r\n        const {project_tasks} = this.props.backlog;\r\n        const {errors} = this.state;\r\n        let BoardContent;\r\n        const boardAlgorithm = (errors, projectTasks)=>{\r\n            if(project_tasks.length < 1){\r\n                if(errors.projectNotFound){\r\n                    return(\r\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                            {errors.projectNotFound}\r\n                        </div>\r\n                    )\r\n                }else if(errors.projectIdentifier){\r\n                    return(\r\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                            {errors.projectIdentifier}\r\n                        </div>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <div className=\"alert alert-info text-center\" role=\"alert\">\r\n                            No Project Task on this board\r\n                        </div>\r\n                    )\r\n                }\r\n            }else {\r\n                return <Backlog project_tasks_prop={project_tasks} />\r\n            }\r\n        }\r\n\r\n        BoardContent = boardAlgorithm(errors, project_tasks);\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n                <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\r\n                    <i className=\"fas fa-plus-circle\"> Create Project Task</i>\r\n                </Link>\r\n                <br />\r\n                <hr />\r\n                {BoardContent}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nProjectBoard.propTypes = {\r\n    backlog: PropTypes.object.isRequired,\r\n    getBacklog: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    backlog: state.backlog,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, {getBacklog}) (ProjectBoard);\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport {addProjectTask} from '../../../actions/backlogAction' ;\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddProjectTask extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        const {id} = this.props.match.params;\r\n\r\n        this.state = {\r\n            summary: \"\",\r\n            acceptanceCriteria: \"\",\r\n            status: \"\",\r\n            priority: 0,\r\n            dueDate: \"\",\r\n            projectIdentifier: id,\r\n            errors: {}\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSubmit=this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.errors){\r\n            this.setState({ errors: nextProps.errors })\r\n        }\r\n    }\r\n    \r\n    onChange(e) {\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n\r\n        const newTask = {\r\n            summary: this.state.summary,\r\n            acceptanceCriteria: this.state.acceptanceCriteria,\r\n            status: this.state.status,\r\n            priority: this.state.priority,\r\n            dueDate: this.state.dueDate\r\n        }\r\n\r\n        this.props.addProjectTask(this.state.projectIdentifier, newTask, this.props.history);\r\n\r\n    }\r\n\r\n    render() {\r\n        const {id} = this.props.match.params;\r\n        const {errors} = this.state;\r\n        return (\r\n            <div className=\"add-PBI\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\r\n                                Back to Project Board\r\n                            </Link>\r\n                            <h4 className=\"display-4 text-center\">Add Project Task</h4>\r\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.summary\r\n                                        })}  \r\n                                        name=\"summary\" \r\n                                        placeholder=\"Project Task summary\" \r\n                                        value= {this.state.summary}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.summary && (\r\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea \r\n                                        className=\"form-control form-control-lg\" \r\n                                        placeholder=\"Acceptance Criteria\" \r\n                                        name=\"acceptanceCriteria\"\r\n                                        value= {this.state.acceptanceCriteria}\r\n                                        onChange={this.onChange}\r\n                                    ></textarea>\r\n                                </div>\r\n                                <h6>Due Date</h6>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"date\" \r\n                                        className=\"form-control form-control-lg\" \r\n                                        name=\"dueDate\" \r\n                                        value= {this.state.dueDate}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <select \r\n                                        className=\"form-control form-control-lg\" \r\n                                        name=\"priority\"\r\n                                        value={this.state.priority}\r\n                                        onChange={this.onChange}\r\n                                    >\r\n                                        <option value={0}>Select Priority</option>\r\n                                        <option value={1}>High</option>\r\n                                        <option value={2}>Medium</option>\r\n                                        <option value={3}>Low</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <select \r\n                                        className=\"form-control form-control-lg\" \r\n                                        name=\"status\"\r\n                                        value={this.state.status}\r\n                                        onChange={this.onChange}\r\n                                    >\r\n                                        <option value=\"\">Select Status</option>\r\n                                        <option value=\"TO_DO\">TO DO</option>\r\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                                        <option value=\"DONE\">DONE</option>\r\n                                    </select>\r\n                                </div>\r\n\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                            </form>\r\n                            <br/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    errors: state.errors\r\n});\r\n\r\nAddProjectTask.propTypes = {\r\n    addProjectTask: PropTypes.func.isRequired,\r\n    errors:PropTypes.object.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, {addProjectTask}) (AddProjectTask);\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport classnames from \"classnames\";\r\nimport {getProjectTask, upadateProjectTask} from \"../../../actions/backlogAction\";\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass UpdateProjectTask extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            id:\"\",\r\n            projectSequence:\"\",\r\n            summary: \"\",\r\n            acceptanceCriteria: \"\",\r\n            status: \"\",\r\n            priority: \"\",\r\n            dueDate: \"\",\r\n            projectIdentifier: \"\",\r\n            create_At: \"\",\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {backlog_id, pt_id} = this.props.match.params;\r\n        this.props.getProjectTask(backlog_id, pt_id, this.props.history);\r\n    }\r\n\r\n    componentWillReceiveProps(newProps){\r\n\r\n        if(newProps.errors){\r\n            this.setState({ errors: newProps.errors })\r\n        }\r\n        \r\n        const {\r\n            id,\r\n            projectSequence,\r\n            summary,\r\n            acceptanceCriteria,\r\n            status,\r\n            priority,\r\n            dueDate,\r\n            projectIdentifier,\r\n            create_At\r\n        } = newProps.project_task;\r\n\r\n        this.setState({\r\n            id,\r\n            projectSequence,\r\n            summary,\r\n            acceptanceCriteria,\r\n            status,\r\n            priority,\r\n            dueDate,\r\n            projectIdentifier,\r\n            create_At\r\n        });\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e){\r\n        this.setState({[e.target.name]:e.target.value});\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault()\r\n\r\n        const UpdateProjectTask = {\r\n            id: this.state.id,\r\n            projectSequence: this.state.projectSequence,\r\n            summary: this.state.summary,\r\n            acceptanceCriteria: this.state.acceptanceCriteria,\r\n            status: this.state.status,\r\n            priority: this.state.priority,\r\n            dueDate: this.state.dueDate,\r\n            projectIdentifier:this.state.projectIdentifier,\r\n            create_At: this.state.create_At\r\n        }\r\n        this.props.upadateProjectTask(this.state.projectIdentifier, this.state.projectSequence, UpdateProjectTask, this.props.history);\r\n\r\n    }\r\n\r\n    render() {\r\n        const {errors}= this.state;\r\n        return (\r\n            <div className=\"add-PBI\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <Link to={`/projectBoard/${this.state.projectIdentifier}`} className=\"btn btn-light\">\r\n                                Back to Project Board\r\n                            </Link>\r\n                            <h4 className=\"display-4 text-center\">Update Project Task</h4>\r\n                            <p className=\"lead text-center\">Project Name: {this.state.projectIdentifier} + Project Task ID: {this.state.projectSequence}</p>\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.summary\r\n                                        })}  \r\n                                        name=\"summary\" \r\n                                        placeholder=\"Project Task summary\" \r\n                                        value={this.state.summary}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.summary && (\r\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.acceptanceCriteria\r\n                                        })}                                          placeholder=\"Acceptance Criteria\" \r\n                                        name=\"acceptanceCriteria\"\r\n                                        value={this.state.acceptanceCriteria}\r\n                                        onChange={this.onChange}\r\n                                    ></textarea>\r\n                                    {errors.acceptanceCriteria && (\r\n                                        <div className=\"invalid-feedback\">{errors.acceptanceCriteria}</div>\r\n                                    )}\r\n                                </div>\r\n                                <h6>Due Date</h6>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"date\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.dueDate\r\n                                        })}   \r\n                                        name=\"dueDate\" \r\n                                        value={this.state.dueDate}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.dueDate && (\r\n                                        <div className=\"invalid-feedback\">{errors.dueDate}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <select \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.priority\r\n                                        })}   \r\n                                        name=\"priority\"\r\n                                        value={this.state.priority}\r\n                                        onChange={this.onChange}\r\n                                    >\r\n                                        <option value={0}>Select Priority</option>\r\n                                        <option value={1}>High</option>\r\n                                        <option value={2}>Medium</option>\r\n                                        <option value={3}>Low</option>\r\n                                    </select>\r\n                                    {errors.priority && (\r\n                                        <div className=\"invalid-feedback\">{errors.priority}</div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <select \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.status\r\n                                        })}   \r\n                                        name=\"status\"\r\n                                        value={this.state.status}\r\n                                        onChange={this.onChange}\r\n                                    >\r\n                                        <option value=\"\">Select Status</option>\r\n                                        <option value=\"TO_DO\">TO DO</option>\r\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                                        <option value=\"DONE\">DONE</option>\r\n                                    </select>\r\n                                    {errors.status && (\r\n                                        <div className=\"invalid-feedback\">{errors.status}</div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nUpdateProjectTask.propTypes = {\r\n    getProjectTask: PropTypes.func.isRequired,\r\n    project_task: PropTypes.object.isRequired,\r\n    upadateProjectTask: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    project_task: state.backlog.project_task,\r\n    errors: state.errors\r\n})\r\n\r\nexport default connect(mapStateToProps, {getProjectTask, upadateProjectTask}) (UpdateProjectTask);","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Landing extends Component {\r\n\r\n    componentDidMount(){\r\n        if(this.props.security.validToken){\r\n            this.props.history.push('/dashboard');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"landing\">\r\n                <div className=\"light-overlay landing-inner text-dark\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12 text-center\">\r\n                                <h1 className=\"display-3 mb-4\">Project Management Tool</h1>\r\n                                <p className=\"lead\">\r\n                                    Create your account to join active projects or start you own\r\n                                </p>\r\n                                <hr />\r\n                                <Link to=\"/register\" className=\"btn btn-lg btn-primary mr-2\">\r\n                                    Sign Up\r\n                                </Link>\r\n                                <Link to=\"/login\" className=\"btn btn-lg btn-secondary mr-2\">\r\n                                    Login\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nLanding.propTypes = {\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProps) (Landing);","import React, { Component } from 'react';\r\nimport {createNewUser} from \"../../actions/securityActions\";\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nclass Register extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            fullName: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            errors: {}\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSubmit= this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.security.validToken){\r\n            this.props.history.push('/dashboard')\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.errors){\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const newUser = {\r\n            username: this.state.username,\r\n            fullName: this.state.fullName,\r\n            password: this.state.password,\r\n            confirmPassword: this.state.confirmPassword\r\n        }\r\n        this.props.createNewUser(newUser, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\r\n                            <p className=\"lead text-center\">Create your Account</p>\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.fullName\r\n                                        })} \r\n                                        placeholder=\"Full Name\" \r\n                                        name=\"fullName\"\r\n                                        value={this.state.fullName}    \r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.fullName && (\r\n                                        <div className=\"invalid-feedback\">{errors.fullName}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"email\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.username\r\n                                        })}  \r\n                                        placeholder=\"Email Address {user name}\" \r\n                                        name=\"username\" \r\n                                        value={this.state.username}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.username && (\r\n                                        <div className=\"invalid-feedback\">{errors.username}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"password\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.password\r\n                                        })}  \r\n                                        placeholder=\"Password\" \r\n                                        name=\"password\" \r\n                                        value={this.state.password}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.password && (\r\n                                        <div className=\"invalid-feedback\">{errors.password}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"password\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.confirmPassword\r\n                                        })}  \r\n                                        placeholder=\"Confirm Password\"\r\n                                        name=\"confirmPassword\" \r\n                                        value={this.state.confirmPassword}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.confirmPassword && (\r\n                                        <div className=\"invalid-feedback\">{errors.confirmPassword}</div>\r\n                                    )}\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nRegister.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    errors: state.errors,\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProps, {createNewUser}) (Register);","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport {login} from '../../actions/securityActions';\r\n\r\nclass Login extends Component {\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            errors: {}\r\n        }\r\n        this.onChange=this.onChange.bind(this);\r\n        this.onSubmit= this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.security.validToken){\r\n            this.props.history.push('/dashboard');\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.security.validToken){\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n\r\n        if(nextProps.errors){\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n    \r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        const LoginRequest = {\r\n            username: this.state.username,\r\n            password: this.state.password\r\n        };\r\n        this.props.login(LoginRequest);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    render() {\r\n\r\n        const {errors} = this.state;\r\n\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h1 className=\"display-4 text-center\">Log In</h1>\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.username\r\n                                        })}   \r\n                                        placeholder=\"Email Address\" \r\n                                        name=\"username\" \r\n                                        value={this.state.username}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.username && (\r\n                                        <div className=\"invalid-feedback\">{errors.username}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input \r\n                                        type=\"password\" \r\n                                        className={classnames(\"form-control form-control-lg \",{\r\n                                            \"is-invalid\": errors.password\r\n                                        })}   \r\n                                        placeholder=\"Password\" \r\n                                        name=\"password\" \r\n                                        value={this.state.password}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    {errors.password && (\r\n                                        <div className=\"invalid-feedback\">{errors.password}</div>\r\n                                    )}\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    login: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security,\r\n    errors: state.errors\r\n})\r\n\r\nexport default connect(mapStateToProps, {login}) (Login);","import React from 'react'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\r\n    <Route\r\n        {...otherProps}\r\n        render={props =>\r\n            security.validToken === true ? (\r\n                <Component {...props} />\r\n            ) : (\r\n                <Redirect to=\"/login\" />\r\n            )\r\n        }\r\n    />\r\n);\r\nSecuredRoute.propTypes = {\r\n    security: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n});\r\n  \r\nexport default connect(mapStateToProps)(SecuredRoute);\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Layout/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AddProject from './components/Project/AddProject';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport UpdateProject from './components/Project/UpdateProject';\nimport ProjectBoard from './components/ProjectBoard/ProjectBoard';\nimport AddProjectTask from './components/ProjectBoard/ProjectTasks/AddProjectTask';\nimport UpdateProjectTask from './components/ProjectBoard/ProjectTasks/UpdateProjectTask';\nimport Landing from './components/Layout/Landing';\nimport Register from './components/UserManagement/Register';\nimport Login from './components/UserManagement/Login';\nimport jwt_decode from 'jwt-decode';\nimport setJWTToken from './securityUtils/setJWTToken';\nimport { SET_CURRENT_USER } from \"./actions/types\";\nimport {logout} from './actions/securityActions'; \nimport SecureRoute from './securityUtils/SecureRoute'\n\nconst jwtToken = localStorage.jwtToken;\n\nif(jwtToken){\n  setJWTToken(jwtToken);\n  const decode_jwtToekn = jwt_decode(jwtToken);\n  store.dispatch({\n      type: SET_CURRENT_USER,\n      payload: decode_jwtToekn\n  });\n  const currentTime = Date.now() / 1000;\n  if(decode_jwtToekn.exp < currentTime){\n    store.dispatch(logout())\n    window.location.href= \"/\";\n  }\n}\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"App\">\n            <Header />\n            {\n              // Public route\n            }\n\n            <Route exact path=\"/\" component={Landing} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login}/>\n            \n            {\n              // Private Route\n            }\n            <Switch>\n              <SecureRoute exact path=\"/dashboard\" component={Dashboard} />\n              <SecureRoute exact path=\"/addProject\" component={AddProject} />\n              <SecureRoute exact path=\"/updateProject/:id\" component={UpdateProject} />\n              <SecureRoute exact path=\"/projectBoard/:id\" component={ProjectBoard}/>\n              <SecureRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask} />\n              <SecureRoute exact path=\"/updateProjectTask/:backlog_id/:pt_id\" component={UpdateProjectTask}/>\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}